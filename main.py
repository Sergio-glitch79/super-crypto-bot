from flask import Flask, request
from telegram import Bot, Update
from telegram.ext import Dispatcher, CommandHandler, MessageHandler, Filters
import os
import ccxt
import threading
import time
import openai

# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
TOKEN = '7049684701:AAFoGlDQKQBPg1Tw9Xa3p2btw5IHgCPM8Qg'
bot = Bot(token=TOKEN)

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º

def get_top_signals():
    try:
        exchange = ccxt.bingx()
        markets = exchange.load_markets()
        signals = []

        for symbol in markets:
            if "/USDT" in symbol:
                try:
                    ticker = exchange.fetch_ticker(symbol)
                    change = ticker['percentage']
                    if change and abs(change) > 3:
                        signals.append(f"üöÄ {symbol}: {ticker['last']} USDT ({change:+.2f}%)")
                except:
                    continue

        return "\n".join(signals) if signals else "‚ÑπÔ∏è –ù–µ—Ç —Å–∏–ª—å–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π —Å–µ–π—á–∞—Å."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

def auto_signal():
    chat_id = os.environ.get("CHAT_ID")
    if not chat_id:
        print("‚ùó –£–∫–∞–∂–∏—Ç–µ CHAT_ID –¥–ª—è –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏")
        return
    while True:
        try:
            signal = get_top_signals()
            bot.send_message(chat_id=chat_id, text=signal)
            time.sleep(600)  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            time.sleep(60)

# –ö–æ–º–∞–Ω–¥–∞ /start

def start(update, context):

    context.bot.send_message(chat_id=update.effective_chat.id,
                             text="üëã –ü—Ä–∏–≤–µ—Ç! –Ø Crypto Signal Advisor. –°–∏–≥–Ω–∞–ª—ã –ø–æ —Å–∏–ª—å–Ω—ã–º –¥–≤–∏–∂–µ–Ω–∏—è–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç. –í–≤–µ–¥–∏ /help –¥–ª—è –ø–æ–º–æ—â–∏.")
print(f"üîé CHAT_ID = {update.effective_chat.id}")
# –ö–æ–º–∞–Ω–¥–∞ /help

def help_command(update, context):
    context.bot.send_message(chat_id=update.effective_chat.id,
                             text="üìã –ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/help ‚Äî –ü–æ–º–æ—â—å\n/signal ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã\n/ask ‚Äî –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI")

# –ö–æ–º–∞–Ω–¥–∞ /signal

def signal_command(update, context):
    context.bot.send_message(chat_id=update.effective_chat.id, text=get_top_signals())

# –ö–æ–º–∞–Ω–¥–∞ /ask ‚Äî AI-–ø–æ–º–æ—â–Ω–∏–∫

def ask_ai(update, context):
    user_question = " ".join(context.args)
    if not user_question:
        context.bot.send_message(chat_id=update.effective_chat.id, text="‚úçÔ∏è –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ /ask")
        return

    try:
        openai.api_key = os.environ.get("OPENAI_API_KEY")
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": user_question}]
        )
        reply = response['choices'][0]['message']['content']
        context.bot.send_message(chat_id=update.effective_chat.id, text=reply)
    except Exception as e:
        context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚ùå –û—à–∏–±–∫–∞ AI: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞

def handle_text(update, context):
    context.bot.send_message(chat_id=update.effective_chat.id, text="ü§ñ –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –í–≤–µ–¥–∏—Ç–µ /help.")

@app.route('/')
def home():
    return 'OK'

@app.route('/webhook', methods=['POST'])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher = Dispatcher(bot, None, workers=1, use_context=True)

    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(CommandHandler('help', help_command))
    dispatcher.add_handler(CommandHandler('signal', signal_command))
    dispatcher.add_handler(CommandHandler('ask', ask_ai))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))
    dispatcher.add_handler(MessageHandler(Filters.command, handle_text))

    dispatcher.process_update(update)
    return 'ok'

if __name__ == '__main__':
    threading.Thread(target=auto_signal, daemon=True).start()
    app.run(host='0.0.0.0', port=5000)

